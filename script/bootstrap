#!/bin/bash

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

DEBUG=false
HWENV="arch-macbook"

debug() {
    if $DEBUG; then
	    printf "\r  [ \033[00;35m??\033[0m ] $1\n"
    fi
}

info() {
	# shellcheck disable=SC2059
	printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user() {
	# shellcheck disable=SC2059
	printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success() {
	# shellcheck disable=SC2059
	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail() {
	# shellcheck disable=SC2059
	printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
	echo ''
	exit
}

setup_gitconfig() {
	info 'setup gitconfig'
	# if there is no user.email, we'll assume it's a new machine/setup and ask it
	if [ -z "$(git config --global --get user.email)" ]; then
		user ' - What is your github author name?'
		read -r user_name
		user ' - What is your github author email?'
		read -r user_email

		git config --global user.name "$user_name"
		git config --global user.email "$user_email"
	elif [ "$(git config --global --get dotfiles.managed)" != "true" ]; then
		# if user.email exists, let's check for dotfiles.managed config. If it is
		# not true, we'll backup the gitconfig file and set previous user.email and
		# user.name in the new one
		user_name="$(git config --global --get user.name)"
		user_email="$(git config --global --get user.email)"
		mv ~/.gitconfig ~/.gitconfig.backup
		success "moved ~/.gitconfig to ~/.gitconfig.backup"
		git config --global user.name "$user_name"
		git config --global user.email "$user_email"
	else
		# otherwise this gitconfig was already made by the dotfiles
		info "already managed by dotfiles"
	fi
	# include the gitconfig.local file
	git config --global include.path ~/.gitconfig.local
	# finally make git knows this is a managed config already, preventing later
	# overrides by this script
	git config --global dotfiles.managed true
	success 'gitconfig'
}

link_file() {
    debug "\$2 readlink: $(readlink $2)"
	if [ -e "$2" ]; then
		if [ "$(readlink "$2")" = "$1" ]; then
			success "skipped, valid existing symlink found \n \
            target: $1 \n \
              link: $2"
			return 0
		else
#			mv "$2" "$2.backup"
			success "moved $2 to $2.backup"
		fi
	fi
	ln -sf "$1" "$2"
	success "linked $1 to $2"
}

install_symlinks() {
	info 'installing symlinks into $HOME'
	find -H "$DOTFILES_ROOT" -maxdepth 3 -name '*.symlink' -not -path '*.git*' |
		while read -r src; do
			dst="$HOME/.$(basename "${src%.*}")"
			link_file "$src" "$dst"
		done
}

install_hwenv_symlinks() {
	info 'installing symlinks based on Hardware environment into $HOME'
	find -H "$DOTFILES_ROOT" -maxdepth 3 -name '*.envlink' -not -path '*.git*' |
		while read -r src; do
            debug $src
            if [[ $src =~ .*$HWENV.* ]]; then
	            dst="$HOME/.$(basename "${src%.*}")"
			    link_file "$src" "$dst"
            fi
		done
}


# 'returns' and validates the output of a config.pathlink file
parse_config_pathlink_file() {
    desired_path=$(cat "$1")
    if [[ $(wc -l <"$1") -eq 1 ]]; then
        echo $(eval "echo $desired_path")
    else
        fail "Invalid number of lines in $1 \n \
        Should be only 1 line with a full path to the desired symlink location.\n \
        e.g.: \"\$HOME/.config\""
    fi
}

# If a directory contains 'config.pathlink' then this will symlink
# the parent folder name to the desired root folder specified in
# the respective 'config.pathlink' file.
# e.g.:
#       > cat ~/.dotfiles/compton/config.pathlink
#       "$HOME/.config"
#       > full_symlink_target_path=$("$HOME/.config/compton")
install_symlinks_with_config_path() {
    info 'installing symlinks with parent folder'
	find -H "$DOTFILES_ROOT" -maxdepth 3 -name 'config.pathlink' -not -path '*.git*' |
        while read -r src; do
            desired_path=$(parse_config_pathlink_file "$src")
            src_path=$(dirname $src)
            # get relative path from the resulting difference
            rpath="${src_path#"$DOTFILES_ROOT"}"
            dst_path="$desired_path/$rpath"
            debug "src: $src"
            debug "desired_path: $desired_path"
            debug "rpath: $rpath"
            debug "src_path: $src_path"
            debug "dst_path: $dst_path"
            link_file "$src_path" "$dst_path"
        done
}

find_zsh() {
	if which zsh >/dev/null 2>&1 && grep "$(which zsh)" /etc/shells >/dev/null; then
		which zsh
	else
		echo "/bin/zsh"
	fi
}

setup_gitconfig
install_symlinks
install_hwenv_symlinks
install_symlinks_with_config_path

info "installing dependencies"
if ./bin/dot_update; then
	success "dependencies installed"
else
	fail "error installing dependencies"
fi

zsh="$(find_zsh)"
test -z "$TRAVIS_JOB_ID" &&
	test "$(expr "$SHELL" : '.*/\(.*\)')" != "zsh" &&
	which chsh >/dev/null 2>&1 &&
	chsh -s "$zsh" &&
	success "set $("$zsh" --version) at $zsh as default shell"

echo ''
echo '  All installed!'
