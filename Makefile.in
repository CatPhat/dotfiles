#gnu makefile

#TODO: 	Add nvidia configuration dotfile based on OS_HW_ENV 
#TODO: 	Fix makefile ignoring existing dotfiles (likely a PHONY related issue, consider using FORCE)
#TODO: 	/home/username/.zshrc:5: unknown condition: -s (fixed, but should be reviewed)
#TODO: 	global git configure
#TODO: 	review zshrc.d for old configurations
#TODO:	fix nvim (no plugin manager)
#TODO:	handle synergy/barrier
#TODO:	fix zshrc v alias

.DEFAULT_GOAL := help

install-all-arch: antibody compton docker feh ffmpeg fzf git golang \
i3 mpv nvim oceanic-next-shell polybar rofi termite tmux zathura \
zsh	x fonts

help: 
	echo "Usage: ..."
		

#### Helpers
comma:= ,
empty:=
space:= $(empty) $(empty)

## variables & env exports
DOTFILES 		:=	$(shell pwd)
ENV_DOTFILES	:=	$(DOTFILES)
ENV_GOPATH 		:= 	$(GOPATH)
# TODO: zshrc.d is appropriate?
ENV_ZDOTDIR		:= 	$(DOTFILES)/zshrc.d
MAKE_ENV 		+= 	ENV_GOPATH ENV_DOTFILES
SHELL_EXPORT 	:= 	$(addprefix export ,$(foreach v,$(MAKE_ENV),$(v)='$($(v))' ))
SHELL_EXPORT_VARS	:= $(subst $(space),$(comma),$(foreach v,$(MAKE_ENV),'$${$(v)}'))
OS_HW_ENV		=	$(OSENV)-$(HWENV)
ZSHRCD_FILES 	:= 	$(sort $(wildcard $(DOTFILES)/zshrc.d/*.zshrc))
#export PATH="$PATH:$GOPATH/bin"
XINITRCD_FILES 	:= 	$(sort $(wildcard $(DOTFILES)/x/$(OS_HW_ENV)/xinitrc.d/*.xinitrc))
ARCH_PM_FLAGS 	= 	--noconfirm --needed
MAKE_DATE_TIME 	=	$(shell date +"%Y_%m_%d_%I_%M_%p")
OCEANIC_NEXT_SHELL_REPO = ${DOTFILES}/oceanic-next-shell/git-repo

## Makefile helpers

# LINK_AND_BACKUP_EXISTING
#	Makes a symbolic link with the provided arguments, backups target if exists.
# 	$1 = src file to link
# 	$2 = link target
define LINK_AND_BACKUP_EXISTING
	if [ -e "$2" ]; \
	then \
		backup_target=$(DOTFILES)/backup/$(notdir $2).$(MAKE_DATE_TIME).backup ;\
		echo "Target exists, backup to " $$backup_target ;\
		mkdir -p $(DOTFILES)/backup ;\
		mv "$2" $$backup_target ;\
	fi ; \
	ln -snf "$1" "$2" && echo "Linked $1 -> $2" ;
endef

## software dependencies
is-not-installed=! (command -v $(1) > /dev/null 2> /dev/null)

## Arch Linux
trizen-pkg-is-not-installed=! (trizen -Q $(1) > /dev/null 2> /dev/null)
pacman-pkg-is-not-installed=! (pacman -Q $(1) > /dev/null 2> /dev/null)

pacman-%: 
	@if ( $(call pacman-pkg-is-not-installed,$*) ); \
	then \
		echo $* " not found in path."; \
		echo "Installing " $*; \
		sudo pacman -S $(ARCH_PM_FLAGS) $*; \
	else \
		echo $* "found"; \
	fi

trizen-%: trizen
	@if ( $(call trizen-pkg-is-not-installed,$*) ); \
	then \
		echo $* "not found in installed packages."; \
		echo "Installing " $*; \
		trizen -S $(ARCH_PM_FLAGS) $*; \
	else \
		echo $* "found"; \
	fi

trizen: git
	@if ( $(call is-not-installed,$@) ); \
	then \
		echo $@ " not found in installed packages."; \
		echo "Installing " $@; \
		git clone https://aur.archlinux.org/trizen.git  /tmp/trizen \
		&& cd /tmp/trizen \
		&& makepkg -si --noconfirm \
	else \
		echo $@ " found"; \
	fi

#### Individual Dotfiles:

#
##
###
#### DOTFILE: ANTIBODY
antibody: $(OSENV)-install-antibody
arch-install-antibody: trizen-antibody-bin ~/.zsh_plugins.sh

~/.zsh_plugins.sh:
	@antibody bundle < $(DOTFILES)/antibody/bundles.txt > $(DOTFILES)/antibody/zsh_plugins.sh
	@antibody update
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/antibody/zsh_plugins.sh,$@)

#
##
###
#### DOTFILE: COMPTON
compton: $(OSENV)-install-compton
arch-install-compton: trizen-compton-git ~/.config/compton

~/.config/compton:
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/compton,$@)

#
##
###
#### DOTFILE: DOCKER
# 		TODO: handle install.sh
docker: $(OSENV)-install-docker
arch-install-docker: pacman-docker

#
##
###
#### DOTFILE: FEH
feh: $(OSENV)-install-feh
arch-install-feh: pacman-feh ~/.xinitrc

#
##
###
#### DOTFILE: FFMPEG
#		TODO: change naming convention to something a bit clearer.
ffmpeg: $(OSENV)-install-$(FULL_FFMPEG_NVENC)-ffmpeg
#arch-install-true-ffmpeg: trizen-ffmpeg-full-nvenc
arch-install-false-ffmpeg: pacman-ffmpeg

#
##
###
#### DOTFILE: FONTS
#		TODO: status check method
#		fc-list | grep -q "nerd-font-complete" etc...
fonts: $(OSENV)-install-fonts

arch-install-fonts: pacman-noto-fonts pacman-noto-fonts-emoji trizen-nerd-fonts-complete
	@fc-cache -fv

#
##
###
#### DOTFILE: FZF
#		TODO: zsh integration
fzf: $(OSENV)-install-fzf
arch-install-fzf: pacman-fzf ~/.zshrc

#
##
###
#### DOTFILE: GIT
#		TODO: configuration
#		TODO: zsh integration
git: $(OSENV)-install-git
arch-install-git: pacman-git

~/.gitignore:
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/git/gitignore,$@)
~/.gitconfig.local:
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/git/gitconfig.local,$@)

#
##
###
#### DOTFILE: GOLANG
golang: $(OSENV)-install-golang
arch-install-golang: pacman-go pacman-go-tools ~/.zshrc

#
##
###
#### DOTFILE: I3WM-Gaps
i3: $(OSENV)-install-i3 FORCE
arch-install-i3: pacman-i3-gaps pacman-i3status ~/.config/i3 ~/.xinitrc polybar

~/.config/i3:
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/i3/$(OS_HW_ENV),$@)

#
##
###
#### DOTFILE: MPV
mpv: $(OSENV)-install-mpv
arch-install-mpv: pacman-mpv ~/.config/mpv

~/.config/mpv:
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/mpv,$@)

#
##
###
#### DOTFILE: NVIM
#		TODO: nvim plugin install?
#		  eg:  nvim -v +PluginInstall +qall
nvim: $(OSENV)-install-nvim
arch-install-nvim: pacman-neovim pacman-python-neovim ~/.config/nvim

~/.config/nvim:
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/nvim,$@)

#
##
###
#### DOTFILE: Oceanic Next Shell
#		TODO: oceanic-next-shell.zshrc ENV_VARS
oceanic-next-shell: $(OSENV)-install-oceanic-next-shell
arch-install-oceanic-next-shell: git ~/.zshrc
	@if [ -d $(OCEANIC_NEXT_SHELL_REPO) ] ; \
	then \
		cd $(OCEANIC_NEXT_SHELL_REPO) ; \
		if git rev-parse --is-inside-work-tree 2> /dev/null ; \
		then \
			git pull ; \
		fi \
	else \
		git clone https://github.com/mhartington/oceanic-next-shell.git  $(OCEANIC_NEXT_SHELL_REPO) ; \
	fi ;



#
##
###
#### DOTFILE: Polybar
polybar: $(OSENV)-install-polybar
arch-install-polybar: trizen-polybar-git ~/.config/polybar

~/.config/polybar: FORCE
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/polybar/$(OS_HW_ENV)/config,$(DOTFILES)/polybar/config)
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/polybar/$(OS_HW_ENV)/launch.sh,$(DOTFILES)/polybar/launch.sh)
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/polybar,$@)

#
##
###
#### DOTFILE: Rofi
rofi: $(OSENV)-install-rofi
arch-install-rofi: pacman-rofi

#
##
###
#### DOTFILE: Termite
termite: $(OSENV)-install-termite
arch-install-termite: pacman-termite pacman-termite-terminfo ~/.config/termite

~/.config/termite:
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/termite,$@)

#
##
###
#### DOTFILE: tmux
tmux: $(OSENV)-install-tmux
arch-install-tmux: pacman-tmux ~/.tmux.conf

~/.tmux.conf:
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/tmux/tmux.conf,$@)

#
##
###
#### DOTFILE: Zathura
zathura: $(OSENV)-install-zathura
arch-install-zathura: pacman-zathura ~/.config/zathura

~/.config/zathura: 
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/tmux,$@)

#
##
###
#### DOTFILE: zsh

zsh: $(OSENV)-install-zsh
arch-install-zsh: pacman-zsh ~/.zshrc

GENERARTED_ZSHRC = $(DOTFILES)/zshrc.d/generated_zshrc

~/.zshrc: FORCE
	@mv $(GENERARTED_ZSHRC) $(GENERARTED_ZSHRC).$(MAKE_DATE_TIME).backup > /dev/null 2> /dev/null
	@$(shell touch $(GENERARTED_ZSHRC))
	@echo '#!/bin/sh' > $(GENERARTED_ZSHRC)
	@for file in $(ZSHRCD_FILES); do \
		$(SHELL_EXPORT); envsubst $(SHELL_EXPORT_VARS) <$$file | sed '1{/#!/d;}' >> $(GENERARTED_ZSHRC) ; \
	done
	@$(call LINK_AND_BACKUP_EXISTING,$(GENERARTED_ZSHRC),$@)

#
##
###
#### DOTFILE: x
x: ~/.xinitrc 
arch-install-x: pacman-xorg pacman-xorg-xinit xterm ~/.xinitrc

GENERARTED_XINITRC = $(DOTFILES)/x/$(OS_HW_ENV)/xinitrc.d/generated_xinitrc

~/.xinitrc: FORCE ~/.Xauthority ~/.Xmodmap ~/.Xresources
	@mv $(GENERARTED_XINITRC) $(GENERARTED_XINITRC).$(MAKE_DATE_TIME).backup > /dev/null 2> /dev/null
	@$(shell touch $(GENERARTED_XINITRC))
	@echo '#!/bin/sh' > $(GENERARTED_XINITRC)
	@for file in $(XINITRCD_FILES); do \
		$(SHELL_EXPORT); envsubst $(SHELL_EXPORT_VARS) <$$file | sed '1{/#!/d;}' >> $(GENERARTED_XINITRC) ; \
	done
	@$(call LINK_AND_BACKUP_EXISTING,$(GENERARTED_XINITRC),$@)

~/.Xauthority:
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/x/$(OS_HW_ENV)/Xauthority,$@)

~/.Xmodmap:
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/x/$(OS_HW_ENV)/Xmodmap,$@)

~/.Xresources:
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/x/$(OS_HW_ENV)/Xresources,$@)

#
##
###
#### DOTFILE: VSCode
#		TODO: http://shanalikhan.github.io/2015/12/15/Visual-Studio-Code-Sync-Settings.html
vscode: $(OSENV)-install-vscode
arch-install-vscode: pacman-code ~/.config/vscode

~/.config/vscode:
	@$(call LINK_AND_BACKUP_EXISTING,$(DOTFILES)/vscode,$@)

.PHONY: FORCE
FORCE: